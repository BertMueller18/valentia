{"name":"Valentia","tagline":"PowerShell Remote deployment library for Windows Servers","body":"# Read Me Fast\r\n\r\nValentia is PowerShell deployment tool for Server-Client model.\r\nThis module set will optimize your work for deploy Commands or files to remote servers.\r\n\r\n# How to install valentia.\r\n\r\nLet's start install valentia.\r\n\r\nYou have 2 choice to install valentia.\r\n\r\n### 1. Install through [NuGet](https://www.nuget.org/packages/valentia/). \r\n\r\nOpen Visual Studio and run below in package manager.\r\n\r\n```\r\nInstall-Package valentia\r\n```\r\n\r\nThis will set package content and also copy valentia to module folder.\r\n\r\n### 2. Open PowerShell or Command prompt, paste the text below and press Enter.\r\n\r\n||\r\n|----|\r\n|powershell -NoProfile -ExecutionPolicy unrestricted -Command 'iex ([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((irm \"https://api.github.com/repos/guitarrapc/valentia/contents/valentia/Tools/RemoteInstall.ps1\").Content))).Remove(0,1)'|\r\n\r\n## Installed Path\r\n\r\nAfter the installation complete, you will find valentia installed into your current user's Module folder.\r\n\r\n```PowerShell\r\n$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\\valentia\r\n```\r\n\r\n# Automate Module Import with PowerShell v3\r\n\r\nWhile valentia sat in standard Module Path, you don't need to import manually. \r\nvalentia will automatically loaded into PowerShell session.\r\n\r\n### Manually import valentia module\r\n\r\nIf you want to import, just type following in PowerShell.\r\n\r\n```PowerShell\r\nImport-Module valentia\r\n```\r\n\r\n# Updates\r\n\r\n- [VersionHistory](https://github.com/guitarrapc/valentia/blob/master/VersionHistory.md)\r\n\r\n# Special Thanks\r\nValentia inspired from [capistrano](https://github.com/capistrano/capistrano) and [psake](https://github.com/psake/psake). They are fantastic and awesome tools for automation and DevOps. Especially psake showed cool way of coding and valentia followed in many points. Also [psasync](http://newsqlblog.com/category/powershell/powershell-concurrency/) and [Get-NetworkInfo](http://learn-powershell.net/2012/05/13/using-background-runspaces-instead-of-psjobs-for-better-performance/) give me inspire to do asynchronous execution.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}