{"name":"Valentia","tagline":"PowerShell Remote deployment library for Windows Servers","body":"# Read Me Fast\r\nValentia is PowerShell deployment tool for Server-Client model.\r\nThis module set will optimize your work for deploy Commands or files to remote servers.\r\n\r\n\r\n# Special Thanks\r\nValentia inspired from [capistrano](https://github.com/capistrano/capistrano) and [psake](https://github.com/psake/psake). They are fantastic and awesome tools for automation and DevOps. Especially psake showed cool way of coding and valentia followed in many points. Also [psasync](http://newsqlblog.com/category/powershell/powershell-concurrency/) and [Get-NetworkInfo](http://learn-powershell.net/2012/05/13/using-background-runspaces-instead-of-psjobs-for-better-performance/) give me inspire to do asynchronous execution.\r\n\r\n\r\n# Latest Change\r\n\r\n- version : 0.3.7\r\n\t\r\n\t[ author : guitarrapc ]\r\n\t\r\n\t[ Mar 17, 2014 ]\r\n\t\r\n\t* fix number of maxRunSpacePool. Now Concurrency is more efficient than previous release.\r\n\t* Added -quiet switch to Ping-ValentiaGroup function. You can suppress host display with this switch.\r\n\t* Added Set-ValentiaWSManMaxProcessesPerShell for Initialize-ValentiaEnvironment. Now more number of process will run.\r\n\t* Added Set-ValentiaCredential. This will store your credential in Windows Credential Manager.\r\n\t* New-ValentiaCredential is now deprecated. Valentia Credential will no longer keep your credential in SecureString File format. Please use Set-ValentiaCredential to manage your credential.\r\n\t* Test-ValentiaConnection is now deprecated. Use Ping-ValentiaGroup for test connection.\r\n\t* Invoke-ValentiaParallel is now deprecated. As Workflow is not useful in many deployemnt cases, valentia no longer support workflow.\r\n\t* As Workflow ristrection is taken away, you can use full PowerShell code. (Since Workflow blocks some cmdlet like Write-Host to use in InlineScript, but Workflow will never use in valentia.)\r\n\t\r\n# Valid OS and PowerShell Verstion\r\n\r\n|OS|PowerShell|\r\n|----|----|\r\n|Windows 7 SP1  |V3.0 and higher|\r\n|Windows 8      |V3.0 and higher|\r\n|Windows 8.1    |V4.0 and higher|\r\n|Windows 2012   |V3.0 and higher|\r\n|Windows 2012 R2|V4.0 and higher|\r\n\r\n#### NOTE: All functions are confirmed with Windows Server 2012 x64 English environment.\r\n\r\n\r\n# Prerequisite\r\n\r\n- You need to install followings to use valentia file transfer.\r\n\r\n|#|Description|Note|\r\n|----|----|----|\r\n|1. |Install \"FastCopy\" to Sync Folders. (please intstall FastCopyx64 to \"C:\\Program Files\\FastCopy\")|[Download FastCopy?](http://ipmsg.org/tools/fastcopy.html)|\r\n|2. |Make sure you can execute PowerShell Script with Execution Policy. To enable Execution Policy then run following command with Admin elevated PowerShell.|```Set-ExecutionPolicy RemoteSigned```|\r\n\r\n\r\n# Easy Install !!\r\n\r\n- Let's start install valentia now, Open PowerShell or Command prompt, paste the text below and press Enter.\r\n\r\n||\r\n|----|\r\n|**powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((irm 'https://api.github.com/repos/guitarrapc/valentia/contents/valentia/RemoteInstall.ps1').Content))).Remove(0,1)\"**|\r\n\r\nAfter the installation complete, you will find valentia installed into your user's Module folder.\r\n\r\n```PowerShell\r\n$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\r\n```\r\n\r\n## Custom Install\r\n\r\n### Local Installation for user\r\n \r\n- If Remote installation are not allowed in your environment, set valentia in any path then you can install valentia localy with run ```install.bat```,  this bat file copy valentia to user module path \r\n\r\n```PowerShell\r\n$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\r\n```\r\n\r\n### Use valentia for all users.\r\n\r\n- In case you want to use valentia with all users, then set valentia module folder to:\r\n\r\n```\r\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\valentia\r\n```\r\n\r\n## Import valentia module\r\n\r\n- In PowerShell V3.0, all modules located in default Module Path will be automatically search and loaded before starting script.\r\n\r\n- If you sat module into custom path, means not default Module Path, PowerShell will not automatically load yout module. In this case, please use Import-Module cmdlet in where ```valentia.psd1``` locating.\r\n\r\n```PowerShell\r\ncd \"move to custom path you sat valentia.psd1\"\r\nImport-Module valentia\r\n```\r\n\r\n- While valentia sat in standard Module Path, described in \"Easy Install\", you don't need to import manually. However ```Import-Module valentia``` will import $valentia variables, and it will be help you some.\r\n\r\n```PowerShell\r\nImport-Module valentia\r\n```\r\n\r\n# valentia functions\r\n\r\n- You can see valentia functions by following command.\r\n\r\n```PowerShell\r\nGet-command -module valentia\r\n```\r\n\r\n- Following functions will be shown.\r\n\r\n|CommandType|Name|ModuleName|\r\n|----|----|----\r\n|Function    |ConvertTo-ValentiaTask             |valentia|  \r\n|Function    |Edit-ValentiaConfig                |valentia|  \r\n|Function    |Get-ValentiaCredential             |valentia|  \r\n|Function    |Get-ValentiaFileEncoding           |valentia|  \r\n|Function    |Get-ValentiaGroup                  |valentia|  \r\n|Function    |Get-ValentiaRebootRequiredStatus   |valentia|  \r\n|Function    |Get-ValentiaTask                   |valentia|  \r\n|Function    |Initialize-ValentiaEnvironment     |valentia|  \r\n|Function    |Invoke-Valentia                    |valentia|  \r\n|Function    |Invoke-ValentiaAsync               |valentia|  \r\n|Function    |Invoke-ValentiaClean               |valentia|  \r\n|Function    |Invoke-ValentiaCommand             |valentia|  \r\n|Function    |Invoke-ValentiaDeployGroupRemark   |valentia|  \r\n|Function    |Invoke-ValentiaDeployGroupUnremark |valentia|  \r\n|Function    |Invoke-ValentiaDownload            |valentia|  \r\n|Function    |Invoke-ValentiaSed                 |valentia|  \r\n|Function    |Invoke-ValentiaSync                |valentia|  \r\n|Function    |Invoke-ValentiaUpload              |valentia|  \r\n|Function    |Invoke-ValentiaUploadList          |valentia|  \r\n|Function    |New-ValentiaDynamicParamMulti      |valentia|  \r\n|Function    |New-ValentiaFolder                 |valentia|  \r\n|Function    |New-ValentiaGroup                  |valentia|  \r\n|Function    |Ping-ValentiaGroupAsync            |valentia|  \r\n|Function    |Set-ValentiaCredential             |valentia|  \r\n|Function    |Set-ValentiaHostName               |valentia|  \r\n|Function    |Set-ValentiaLocation               |valentia|  \r\n|Function    |Show-ValentiaConfig                |valentia|  \r\n|Function    |Show-ValentiaGroup                 |valentia|  \r\n|Function    |Show-ValentiaPromptForChoice       |valentia|  \r\n|Filter      |Write-ValentiaVerboseDebug         |valentia|  \r\n\r\n\r\n\r\n\r\n# valentia Alias\r\n\r\n- valentia functions have Alias to let you use it easir, you can find them as like this.\r\n\r\n```PowerShell\r\nGet-Alias | where ModuleName -eq \"valentia\"\r\n```\r\n\r\n- This show alias defined in valentia\r\n\r\n|CommandType|Name|ResolveCommandName|ModuleName|\r\n|----|----|----|----|\r\n|Alias|Clean|Invoke-ValentiaClean|Valentia|\r\n|Alias|Cred|Get-ValentiaCredential|Valentia|\r\n|Alias|Download|Invoke-ValentiaDownload|Valentia|\r\n|Alias|Go|Set-ValentiaLocation|Valentia|\r\n|Alias|Initial|Initialize-ValentiaEnvironment|Valentia|\r\n|Alias|IPRemark|Invoke-valentiaDeployGroupRemark|Valentia|\r\n|Alias|IPUnremark|Invoke-ValentiaDeployGroupUnremark|Valentia|\r\n|Alias|PingAsync|Ping-ValentiaGroupAsync|Valentia|\r\n|Alias|Rename|Set-ValentiaHostName|Valentia|\r\n|Alias|Sync|Invoke-ValentiaSync|Valentia|\r\n|Alias|Target|Get-ValentiaGroup|Valentia|\r\n|Alias|Task|Get-ValentiaTask|Valentia|\r\n|Alias|Upload|Invoke-ValentiaUpload|Valentia|\r\n|Alias|UploadL|Invoke-ValentiaUploadList|Valentia|\r\n|Alias|Vale|Invoke-Valentia|Valentia|\r\n|Alias|Valea|Invoke-ValentiaAsync|Valentia|\r\n|Alias|Valep|Invoke-ValentiaParallel|Valentia|\r\n\r\n\r\n# Execute deploy Commands\r\n\r\nAfter you satup Server/Clients, Credential amd DeproyGroups you can start execution.\r\n\r\n\r\n## 1. vale : Back ground job execution.\r\n\r\n> **vale** is Alias of ```Invoke-Valentia```. This will execute Command to deploy group as back ground job.\r\n> vale is the standard way of valentia Command execution to the host, and quite fast in many cases. (Invoke-Valentia will run like Asynchros.)\r\n\r\nYou have 2 choice executing command to host.\r\n\r\n|#|Run|Expression|\r\n|----|----|----|\r\n|1.|ScriptBlock|```vale Deploygroup {ScriptBlock}```|\r\n|2.|Task File|```vale DeployGroup .\\Taskfile.ps1```|\r\n\r\n\r\n## 2. valea : Asynchronous RunSpace Command invokation.\r\n\r\n> **valea** is Alias of ```Invoke-ValentiaAsync```. This will execute Command to deploy group as RunSpacePooling.\r\n> valea is the asynchronous way of valentia Command execution to the host, and quite fast in most of the cases.\r\n\r\nYou have 2 choice executing command to host.\r\n\r\n|#|Run|Expression|\r\n|----|----|----|\r\n|1.|ScriptBlock|```valea Deploygroup {ScriptBlock}```|\r\n|2.|Task File|```valea DeployGroup .\\Taskfile.ps1```|\r\n\r\n\r\n# Execute File transfer Commands\r\n\r\n### 1. upload : Single File Upload from Server to Clients\r\n\r\n> **upload** is Alias of ```Invoke-ValentiaUpload```. You can upload file to client.\r\n> This function wrapps BITs Transfer inside and you can use option of BITS Transfer.\r\n\r\n#### NOTE: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\nYou have 2 choice executing command to host.\r\n\r\nex ) Upload file c:\\deployment\\upload\\upload.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n|#|Run|Expression|\r\n|----|----|----|\r\n|1.|Synchronous|```upload -SourceFile \"hoge.txt\" -DestinationFolder c:\\ -DeployGroup new```|\r\n|2.|Asynchronous|```upload -SourceFile \"hoge.txt\" -DestinationFolder c:\\ -DeployGroup new -Async```|\r\n\r\n### 2. uploadL : Files in List Upload from Server to Clients\r\n\r\n> **uploadL** is Alias of ```Invoke-ValentiaUploadList```. You can upload multiple files listed in file.\r\n> This function wrapps BITs Transfer inside and you can use option of BITS Transfer.\r\n\r\n#### NOTE: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\n- List File format should like this.\r\n\r\n```\r\nSource, Destination\r\nC:\\Deployment\\Upload\\DownLoad.txt,\\\\10.0.4.100\\C$\r\nC:\\Deployment\\Upload\\hogehoge.txt,\\\\10.0.4.100\\C$\r\n```\r\n\r\n> 1st top line is an \"Header\" for Source, Destination.\r\n> 2nd line is SourceFile fullpath and Destination folder full path to transfer.\r\n> Keep Deleimiter as \",\".\r\n\r\nex ) Upload files listed in c:\\deployment\\upload\\list.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n|#|Run|Expression|\r\n|----|----|----|\r\n|1.|Synchronous|```UploadL -ListFile list.txt -DestinationFolder c:\\ -DeployGroup new```|\r\n|2.|Asynchronous|```UploadL -ListFile list.txt -DestinationFolder c:\\ -DeployGroup new -Async```|\r\n\r\n### 3. sync : Sync Server Folder and Files with Clients (DIFF mode)\r\n\r\n> **sync** is Alias of ```Invoke-ValentiaSync```. You can Synchronise DeployServer folder and Clients Folder.\r\n> Parent will be DeployServer, it means clietns folder will be changed to sync as like as DeployServer.\r\n> This function wrapps FastCopy.exe inside and you need install FastCopy.exe inadvance.\r\n\r\nex ) sync folder C:\\Requirements to Remote Client folder \"C:\\hoge hoge\" for DeployGroup new is.\r\n\r\n|#|Run|Expression|\r\n|----|----|----|\r\n|1.|Synchronous|```sync -SourceFolder C:\\Requirements -DestinationFolder \"c:\\hoge hoge\" -DeployGroup new```|\r\n|2.|Asynchronous|Not yet ready.|\r\n\r\n\r\n# Environment Setup Commands\r\n\r\n- Before you start valentia deployment, you should setup both Server and Clients to work PSRemote Connection.\r\n\r\n### 1. Initialize-ValentiaEnvironment : Setup Server\r\n\r\n- This command will let your Server for valentia remoting.\r\n\r\n```text\r\n1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n2. Enable-PSRemoting\r\n3. Add hosts to trustedHosts  (Default : *)\r\n4. Set MaxShellsPerUser from 25 to 100\r\n5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n7. Create OS user for Deploy connection. (Default : ec2-user)\r\n8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n9. Create/Revise Deploy user credential secure file. (Server Only / Default : True)\r\n10. Create Deploy Folders (Server Only / Default : True)\r\n11. Set HostName as format (white-$HostUsage-IP)\r\n12. Get Status for Reboot Status\r\n```\r\n\t\r\n- Once ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\"\r\n```\r\n\r\n- you can omit ```-Server``` and ```-TrustedHosts \"*\"``` as it were default \r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment\r\n```\r\n\r\n- When Credential prompt was display input password in masked read line, then OS user (in default ec2-user) will be created and all PSRemote session to all hosts are enabled.\r\n- Also trying to save password in secdure stirng in default, input deploy user password again.\r\n\r\n\r\n- If you want to restrict Trusted Hosts, you can use -TrustedHosts parameter to select. \r\n\r\nex) restrict to 10.0.0.0\r\n```PowerShell\r\nInitialize-ValentiaServer -TrustedHosts \"10.0.0.0\"\r\n```\r\n\r\n- If you want setup without OS User setup? then add -NoOSUser switch. \r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n- ServerOnly : If you want setup without OS User setup and Save Credentail? then add -NoPassSave switch.\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoPassSave\r\n```\r\n\r\n\r\n### 2. Initialize-ValentiaEnvironment -Client : Setup Clients\r\n\r\n- This command will let your Client for valentia remoting.\r\n\r\n\t1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n\t2. Enable-PSRemoting\r\n\t3. Add hosts to trustedHosts  (Default : *)\r\n\t4. Set MaxShellsPerUser from 25 to 100\r\n\t5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n\t6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n\t7. Create OS user for Deploy connection. (Default : ec2-user)\r\n\t8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n\t9. Create Deploy Folders (Server Only / Default : True)\r\n\t10. Set HostName as format (white-$HostUsage-IP)\r\n\t11. Get Status for Reboot Status\r\n\r\n\r\n- Once ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\"\r\n```\r\n\r\n- you can omit ```-TrustedHosts \"*\"``` as it were default\r\n\r\n> - NOTE: If you sat Server and Client \"SAME USER and SAME PASSWORD\" then credential will be escaped.\r\n> \r\n> - This means, if you ran Initialize-ValentiaServer and Initialize-ValentiaClient, then ec2-user will be used and can be escape credential input.\r\n> \r\n> - Because of Parallel commands using workflow, (Domain separation), credential escape was required.\r\n> \r\n> - The other command can retrieve and use Credential, so other user credential will also valid for them.\r\n\r\n\r\n- Wanna setup without OS User setup? then add -NoOSUser switch.\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n\r\n### 3. Set-ValentiaCredential : Set Credential into Windows Credential Manager\r\n\r\n- This function will store your credential to authorize PSRemoting into Windows Credential Manager.\r\n\r\n> - If you ran Initialize-ValentiaServer without -NoSavePass switch, then you can skip this section.\r\n> - User name for the credential will be used as define in config file.\r\n\r\n```PowerShell\r\nNew-ValentiaCredential\r\n```\r\n\r\n> NOTE: Once you execute command, you will got prompt to save secure strings of user.\r\n\r\n\r\n### 4. Get-ValentiaCredential :Read Credential from Windows Credential Manager\r\n\r\n- This function will read your credential from Windows Credential Manager, and return PSCredential Type.\r\n\r\n```PowerShell\r\nGet-ValentiaCredential\r\n```\r\n\r\n### 5. Initialize-ValentiaGroup : Create New deploygroup file\r\n\r\n> - To execute deployment command to multiple hosts, you don't need to input hosts everytime. Just list them up in file.\r\n> - The file you specified will be output in following path.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\ *****.ps1\r\n```\r\n\r\n- Deploy Group file just required to be split by `r`n.\r\n- SAMPLE deployGroup input\r\n\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n# 10.0.0.101 <= this line will be remarked as not started with decimal\r\n```\r\n\r\n- You can create deploy group file in only one command. Of cource there are several way to create deploygroup file.\r\n- You can make file with excel,notepad or powershell utils here.\r\n\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients array[] -FileName FILENAME.ps1\r\n```\r\n\r\n- SAMPLE CODE:\r\n\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients \"10.0.0.1\",\"10.0.0.2\" -FileName sample.ps1\r\n```\r\n\r\n- This will make sample.ps1 in C:\\Deployment\\Deploy_group\\ with 2 hosts (\"10.0.0.1\",\"10.0.0.2\") written.\r\n\r\n- When using DeployGroup, just set file name without Extensions.\r\n\r\nex) if you sat file name as \"new.ps1\" then use it by \"new\".\r\n\r\n### 6. Invoke-valentiaDeployGroupRemark : Remark ipaddress for deploygroup file inside deploygroup\r\n\r\n- There would be many time to remark some deploy target inside deploygroup file. This is easy work but boring to check which file contains target deploy ip.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\n- SAMPLE deployGroup input\r\n\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102 <= if you want to remark this line for all the files inside deploygroup folder.\r\n```\r\n\r\n- Just type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\n- This will change PowerShell\r\n\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102\r\n```\r\n\r\n- if you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n \r\n\r\n### 7. Invoke-valentiaDeployGroupUnremark : Unremark ipaddress for deploygroup file inside deploygroup\r\n\r\n- if you remark ipaddresses in deploygroup file, then you want to unremark it:) This function will ease you unremark target ipaddresses and check how change.\r\n\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\n- SAMPLE deployGroup input\r\n\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102 <= if you want to unremark this line for all the files inside deploygroup folder.\r\n```\r\n\r\n- Just type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\n- This will change PowerShell\r\n\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102\r\n```\r\n\r\n- if you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n\r\n\r\n# Task for Commandset\r\n\r\n### Summary of Task\r\n\r\n- You can make task file To execute many commands.\r\n- Write task in file with below format and save it in BranchFolders you want to work.\r\n\r\n> Note: BranchFolder will be C:\\Deployment \"application\", \"Image\", \"SWF\", \"SWF-Image\", \"Utils\". (Created by Initialize-ValentiaServer)\r\n\r\n``` PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\n- After you made task, you should move to BranchFolder you saved task.\r\n\r\n### Convert existing .ps1 to task and setup task.\r\n\r\n- It's easy to convert normal .ps1 to task. Task file format is as below.\r\n\r\n```PowerShell\r\ntask taskname -Action {\r\n\tPowerShell Commands you want to run\r\n}\r\n```\r\n\r\n- If you have .ps1 like this code.\r\n\r\n```PowerShell\r\nGet-ChildItem\r\n```\r\n\r\n\r\n- Then task will be like this.\r\n\r\n```PowerShell\r\ntask taskname -Action {\r\n\tGet-ChildItem\r\n}\r\n```\r\n\r\n- You can use almost all functions and variables set. Please check vale and valep section about a detail of some functions cannot use in task.\r\n\r\n> Note:\r\n> \r\n> * valentia functions get stored credential before running task, therefore you don't need to create/write credentials in your script.\r\n> * In other word, do not try to get another credential in you script. Especially in \"valep\" .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}