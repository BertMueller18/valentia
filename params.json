{"name":"Valentia","tagline":"PowerShell Remote deployment library for Windows Servers","body":"# Read Me Fast\r\nValentia is PowerShell deployment tool for Server-Client model.\r\nThis module set will optimize your work for deploy Commands or files to remote servers.\r\n\r\n\r\n# Special Thanks\r\nValentia inspired from capistrano ( a Ruby deployment tool for Linux) and psake ( a PowerShell build tool).\r\nThey are fantastic and awesome tools for automation and DevOps.\r\nEspecially psake showed cool way of coding and valentia followed in many points.\r\n\r\nAlso [psasync](http://newsqlblog.com/category/powershell/powershell-concurrency/) and [Get-NetworkInfo](http://learn-powershell.net/2012/05/13/using-background-runspaces-instead-of-psjobs-for-better-performance/) give me inspire to do asynchronous execution.\r\n\r\n\r\n# Latest Change\r\n\r\n## Version 0.3.x\r\n\r\n- version : 0.3.3\r\n\t\r\n\t[ author : guitarrapc ]\r\n\t\r\n\t[ Nov 15, 2013 ]\r\n\t\r\n\t* \r\n\t* Added function ```Show-ValentiaConfig```. Now you can check valentia-config.ps1 within console.\r\n\t* Added function ```Edit-ValentiaConfig```. Now you can edit valentia-config.ps1 with PowerShell ISE.\r\n\t* fix issue 31 : valentia cmdlet will stop with error when trying to run more then 2 whithin same console\r\n\t* Enhanced issue 32 : Now you can modify Runspace Pool Size within valentia-config.ps1 \r\n\r\n\r\n# Basic\r\n\r\n## Valid OS and PowerShell Verstion\r\n\r\nvalentia works with PowerShell Version 3.0 and higher.\r\n\r\n|OS|PowerShell Version|\r\n|:----:|:----:|\r\n|Windows 7 |3.0 and higher|\r\n|Windows 8 |3.0 and higher|\r\n|Windows 8.1 |4.0 and higher|\r\n|Windows 2008R2 |3.0 and higher|\r\n|Windows 2012 |3.0 and higher|\r\n|Windows 2012 R2|4.0 and higher|\r\n\r\nnote : all functions are confirmed with Windows Server 2012 x64 English environment.\r\n\r\n### Development Environment\r\n\r\nI'm develop Valentia with following environemt.\r\n\r\n|OS|PowerShell Version|\r\n|:----:|:----:|\r\n|Windows 8 |3.0 and higher|\r\n|Windows 8.1 |4.0 and higher|\r\n|Windows 2012 |3.0 and higher|\r\n\r\n## Prerequisite\r\n\r\nPlease consider followings before using valentia.\r\n\r\n1. Allow ```PowerShell Execution Policy```\r\n2. Set Network Profile not in public.\r\n3. Install Tools using in valentia\r\n\r\n#### 1. PowerShell Execution Policy\r\n\r\nYou can define your PowerShell Commands into scripts which can use in Valentia. However PowerShell default execution Policy don't trust scripts, it is required change Execution Policy from ```Restricted``` to any other. Then you can load PowerShell Scripts using Valentia Task Keyword.\r\n\r\nTo enable loading your custom PowerShell Scripts, execute following command with Admin elevated PowerShell console.\r\n\r\n```PowerShell\r\nSet-ExecutionPolicy RemoteSigned\r\n```\r\n\r\n- The default Execution policy of \"PowerShell V4 on Windows Server 2012 R2\" is ```RemoteSigned```.\r\n\r\n#### 2. Network Profile\r\n\r\nValentia is Deployment library with PowerShell. The base of remote connection between Server and Client is PowerShell Remoting. It means you need to enable PSRemoting to use valentia.\r\n\r\nPlease run following commands to check you network adaptor profile.\r\n```PowerShell\r\nGet-NetConnectionProfile\r\n```\r\nIf you find any Network Adaptor showing as **Public** then ```Enable-PSRemoting -Force``` will fail.\r\n\r\nTo change all the Network adaptor which NetworkCategory from ```Public``` to ```Private``` then run following command with Admin elevated PowerShell \r\n\r\n```PowerShell\r\nGet-NetConnectionProfile | where NetworkCategory -eq \"Public\" | Set-NetConnectionProfile -NetworkCa\r\ntegory Private\r\n```\r\n\r\n#### 3. Tools \r\n\r\nThe following tools are used in Valentia. You can ignore them if you don't Valentia Cmdlet which depend on tools.\r\n\r\n|Tool|using Valentia Cmdlet|Description|URI|\r\n|:----:|:----:|:----:|:----:|\r\n|Bits Transfer|```Invoke-ValentiaUpload``` & ```Invoke-ValentiaUploadList```|Using for Single and List file transfer. Enable \"IIS BITs Transfer\" from \"Windows Program and freature\"|<a href=\"http://msdn.microsoft.com/en-us/library/bb968799(v=vs.85).aspx\" title=\"Background Intelligent Transfer Service\">Background Intelligent Transfer Service</a>|\r\n|FastCopy|```Invoke-ValentiaSync```|Please intstall FastCopyx64 to \"C:\\Program Files\\FastCopy\" or configure path to fastcopy.exe with ```valentia-config.ps1```|[Download FastCopy? click here to go HP.](http://ipmsg.org/tools/fastcopy.html)|\r\n\r\n# Install valentia module\r\n\r\nTo use valentia module, please set valentia folder to PowerShell module path. Normally user module path is defined in Environment variables ```PATH``` as ```%homepath%\\documents\\WindowsPowerShell\\Module\\```\r\n\r\n## 1. Valentia Installation\r\n\r\nValentia written with standard module, thus the only thing required is \"set valentia folder into module path or custom path\".\r\n\r\n#### Using Valentia with Current User only\r\n\r\nYou can install valentia with running ```install.bat```. This bat file will copy Valentia to user Module Path.\r\n\r\n|Module Scope|Copying Module Path|\r\n|:----:|:----:|\r\n|Current User only|```env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\\Valentia```|\r\n\r\n#### Using Valentia with All Users\r\n\r\nIf you you want to use valentia with all users in your machine, then set valentia module folder to Machine Module Path.\r\n\r\nif you are using x64 Windows and want to use Valentia with PowerShell x86 then Module path is under SysWOW64.\r\n\r\n|Module Scope|Copying Module Path|\r\n|:----:|:----:|\r\n|All Users|```C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\Valentia```|\r\n|All Users (x86 for 64bit OS)|```C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\Modules\\Valentia```|\r\n\r\n#### Custom Path\r\n\r\nIf you don't want copy Valentia to any module path but using your custom path, then set Valentia anywhere you want.\r\n\r\n|Module Scope|Copying Module Path Sample|\r\n|:----:|:----:|\r\n|Anywhere|```D:\\CustomPowerShell\\Valentia```|\r\n\r\n## 2. Import valentia module\r\n\r\n### If you set Valentia in Default PowerShell Module Path\r\n\r\nIn PowerShell V3.0, all modules located in Module Path will be automatically loaded. You don't need to use ```Import-Modue Valentia``` in this case. Normally default Module Path is defined in Environment variables \"PATH\".\r\n\r\n|Module Scope|Default Module Path|\r\n|:----:|:----:|\r\n|Current user Module Path|env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules|\r\n|Machine level Module Path|C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\valentia|\r\n|Machie level (x86 for 64bit OS)|```C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\Modules\\Valentia```|\r\n\r\nValentia Module will automatically import when calling Valentia functions. However if you want to check $valentia variables before running Valentia Cmdlet, then ```Import-Module``` is required.\r\n\r\n```PowerShell\r\nImport-Module valentia\r\n```\r\n\r\n### If you set Valentia in Custom Path\r\n\r\nif you sat module in custom path, then it is required using Import-Module Cmdlet to Import valentia in your PowerShell session.\r\n\r\n```PowerShell\r\ncd PathToValentia # the path you set valentia.psm1\r\nImport-Module valentia\r\n```\r\n\r\n### Reload initial valentia settings into current PowreShell Session\r\n\r\nYou can reload Module into current session anytime with following command.\r\n\r\n```PowerShell\r\nImport-Module valentia -Force -Verbose\r\n```\r\n\r\n# Check Valentia Cmdlets and Alias\r\n\r\nAfter Valentia had sat in Module Path or Imported, you can use Valentia!!\r\n\r\n## 1. Valentia Cmdlets\r\n\r\nYou can check all Valentia Cmdlets by running command.\r\n\r\n```PowerShell\r\nGet-command -module valentia\r\n```\r\n\r\nFollowing Cmdlets will be shown.\r\n\r\n|CommandType |Name|ModuleName|\r\n|:----|:----|:----|\r\n|Function|    ConvertTo-ValentiaTask|             valentia|\r\n|Function|    Edit-ValentiaConfig|                valentia|\r\n|Function|    Get-ValentiaCredential|             valentia|\r\n|Function|    Get-ValentiaFileEncoding|           valentiav\r\n|Function|    Get-ValentiaGroup|                  valentia|\r\n|Function|    Get-ValentiaRebootRequiredStatus|   valentia|\r\n|Function|    Get-ValentiaTask|                   valentia|\r\n|Function|    Initialize-ValentiaEnvironment|     valentia|\r\n|Function|    Invoke-Valentia|                    valentia|\r\n|Function|    Invoke-ValentiaAsync|               valentia|\r\n|Function|    Invoke-ValentiaClean|               valentia|\r\n|Function|    Invoke-ValentiaCommand|             valentia|\r\n|Function|    Invoke-valentiaDeployGroupRemark|   valentia|\r\n|Function|    Invoke-valentiaDeployGroupUnremark| valentia|\r\n|Function|    Invoke-ValentiaDownload|            valentia|\r\n|Function|    Invoke-ValentiaParallel|            valentia|\r\n|Function|    Invoke-ValentiaSync|                valentia|\r\n|Function|    Invoke-ValentiaUpload|              valentia|\r\n|Function|    Invoke-ValentiaUploadList|          valentia|\r\n|Function|    New-ValentiaCredential|             valentia|\r\n|Function|    New-ValentiaFolder|                 valentia|\r\n|Function|    New-ValentiaGroup|                  valentia|\r\n|Function|    Set-ValentiaHostName|               valentia|\r\n|Function|    Set-ValentiaLocation|               valentia|\r\n|Function|    Show-ValentiaConfig|                valentia|\r\n|Function|   Show-ValentiaGroup|                 valentia|\r\n|Function|    Show-ValentiaPromptForChoice|       valentia|\r\n|Workflow|    Invoke-ValentiaCommandParallel|     valentia|\r\n\r\n\r\n## 2. Valentia Alias\r\n\r\nAll Cmdlets have alias to let you use easily.\r\nYou can find them as like this.\r\n\r\n```PowerShell\r\nGet-Alias | where ModuleName -eq \"valentia\"\r\n```\r\n\r\nFollowing Alias->Cmdlets will be shown.\r\n\r\n\r\n|CommandType |DisplayName|ModuleName|\r\n|:----|:----|:----|\r\n|Alias|Clean -> Invoke-ValentiaClean|valentia\r\n|Alias|Cred -> Get-ValentiaCredential|valentia\r\n|Alias|Download -> Invoke-ValentiaDownload|valentia\r\n|Alias|Go -> Set-ValentiaLocation|valentia\r\n|Alias|Initial -> Initialize-ValentiaEnvironment|valentia\r\n|Alias|ipremark -> Invoke-valentiaDeployGroupRemark|valentia\r\n|Alias|ipunremark -> Invoke-valentiaDeployGroupUnremark|valentia\r\n|Alias|Rename -> Set-ValentiaHostName|valentia\r\n|Alias|Sync -> Invoke-ValentiaSync|valentia\r\n|Alias|Target -> Get-ValentiaGroup|valentia\r\n|Alias|Task -> Get-ValentiaTask|valentia\r\n|Alias|Upload -> Invoke-ValentiaUpload|valentia\r\n|Alias|UploadL -> Invoke-ValentiaUploadList|valentia\r\n|Alias|Vale -> Invoke-Valentia|valentia\r\n|Alias|Valea -> Invoke-ValentiaAsync|valentia\r\n|Alias|Valep -> Invoke-ValentiaParallel|valentia\r\n\r\n# Environment Setup Commands\r\n\r\nBefore you start valentia deployment, you should setup both Server and Clients to work PSRemote Connection.\r\n\r\n### 1. ```Initialize-ValentiaEnvironment``` : Setup Server\r\n\r\nThis command will let your Server for valentia remoting.\r\n\r\n\t1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n\t2. Enable-PSRemoting\r\n\t3. Add hosts to trustedHosts  (Default : *)\r\n\t4. Set MaxShellsPerUser from 25 to 100\r\n\t5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n\t6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n\t7. Create OS user for Deploy connection. (Default : ec2-user)\r\n\t8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n\t9. Create/Revise Deploy user credential secure file. (Server Only / Default : True)\r\n\t10. Create Deploy Folders (Server Only / Default : True)\r\n\t11. Set HostName as format (white-$HostUsage-IP)\r\n\t12. Get Status for Reboot Status\r\n\t\r\n\t* Currently remarking Set-NetworkProfile private\r\n\r\nOnce ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\"\r\n```\r\n\r\n** you can omit ```-Server``` and ```-TrustedHosts \"*\"``` as it were default **\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment\r\n```\r\n\r\nWhen Credential prompt was display input password in masked read line, then OS user (in default ec2-user) will be created and all PSRemote session to all hosts are enabled.\r\nAlso trying to save password in secdure stirng in default, input deploy user password again.\r\n\r\n\r\n** If you want to restrict Trusted Hosts, you can use -TrustedHosts parameter to select. **\r\n\r\nex) restrict to 10.0.0.0\r\n```PowerShell\r\nInitialize-ValentiaServer -TrustedHosts \"10.0.0.0\"\r\n```\r\n\r\n** If you want setup without OS User setup? then add -NoOSUser switch. **\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n** ServerOnly : If you want setup without OS User setup and Save Credentail? then add -NoPassSave switch. **\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoPassSave\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n### 2. ```Initialize-ValentiaEnvironment -Client``` : Setup Clients\r\n\r\nThis command will let your Client for valentia remoting.\r\n\r\n\t1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n\t2. Enable-PSRemoting\r\n\t3. Add hosts to trustedHosts  (Default : *)\r\n\t4. Set MaxShellsPerUser from 25 to 100\r\n\t5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n\t6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n\t7. Create OS user for Deploy connection. (Default : ec2-user)\r\n\t8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n\t9. Create Deploy Folders (Server Only / Default : True)\r\n\t10. Set HostName as format (white-$HostUsage-IP)\r\n\t11. Get Status for Reboot Status\r\n\r\n\r\nOnce ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\"\r\n```\r\n\r\n** you can omit ```-TrustedHosts \"*\"``` as it were default**\r\n\r\n- NOTE: If you sat Server and Client \"SAME USER and SAME PASSWORD\" then credential will be escaped.\r\n- This means, if you ran Initialize-ValentiaServer and Initialize-ValentiaClient, then ec2-user will be used and can be escape credential input.\r\n- Because of Parallel commands using workflow, (Domain separation), credential escape was required.\r\n- The other command can retrieve and use Credential, so other user credential will also valid for them.\r\n\r\n\r\nWanna setup without OS User setup? then add -NoOSUser switch.\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n### 3. ```New-ValentiaCredential``` : Create New Credential secure file\r\n\r\nFollowing command will make secure string file to save your credential.\r\n** If you ran Initialize-ValentiaServer without -NoSavePass switch, then you can skip this section. **\r\n** However if you want to revise saved secure Password, then use this Cmdlet to revise save file. **\r\n\r\n\r\n```PowerShell\r\nNew-ValentiaCredential\r\n```\r\n\r\nor you can select user for credential.\r\n\r\n```PowerShell\r\nNew-ValentiaCredential -User hogehoge\r\n```\r\n\r\n- NOTE: Once you execute command, you will got prompt to save secure strings of user.\r\n- Default user is sat as ec2-user, it will use if no -user had input.\r\n\r\n\r\n### 4. ```Initialize-ValentiaGroup``` : Create New deploygroup file\r\n\r\nTo execute deployment command to multiple hosts, you don't need to input hosts everytime.\r\nJust list them up in file.\r\n\r\nThe file you specified will be output in following path.\r\n```\r\nC:\\Deployment\\Deploygroup\\ *****.ps1\r\n```\r\n\r\nDeploy Group file just required to be split by `r`n.\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n# 10.0.0.101 <= this line will be remarked as not started with decimal\r\n```\r\n\r\nYou can create deploy group file in only one command.\r\nOf cource there are several way to create deploygroup file.\r\nYou can make file with excel,notepad or powershell utils here.\r\n\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients array[] -FileName FILENAME.ps1\r\n```\r\n\r\nSAMPLE CODE:\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients \"10.0.0.1\",\"10.0.0.2\" -FileName sample.ps1\r\n```\r\n\r\nthis will make sample.ps1 in C:\\Deployment\\Deploy_group\\ with 2 hosts (\"10.0.0.1\",\"10.0.0.2\") written.\r\n\r\nWhen using DeployGroup, just set file name without Extensions.\r\nex) if you sat file name as \"new.ps1\" then use it by \"new\".\r\n\r\n### 5. ```Invoke-valentiaDeployGroupRemark``` : Remark ipaddress for deploygroup file inside deploygroup\r\n\r\nThere would be many time to remark some deploy target inside deploygroup file.\r\nThis is easy work but boring to check which file contains target deploy ip.\r\n\r\nThis cmdlet will ease you remark target ipaddresses and check how change.\r\n\r\n\r\nThe cmdlet will search recursible inside deploygroup.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102 <= if you want to remark this line for all the files inside deploygroup folder.\r\n```\r\n\r\nJust type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\nThis will change PowerShell\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102\r\n```\r\n\r\nif you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n \r\n\r\n### 6. ```Invoke-valentiaDeployGroupUnremark``` : Unremark ipaddress for deploygroup file inside deploygroup\r\n\r\nif you remark ipaddresses in deploygroup file, then you want to unremark it:)\r\nThis cmdlet will ease you unremark target ipaddresses and check how change.\r\n\r\n\r\nThe cmdlet will search recursible inside deploygroup.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102 <= if you want to unremark this line for all the files inside deploygroup folder.\r\n```\r\n\r\nJust type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\nThis will change PowerShell\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102\r\n```\r\n\r\nif you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n\r\n\r\n# Task for Commandset\r\n\r\n### Summary of Task\r\n\r\nYou can make task file To execute many commands.\r\nWrite task in file with below format and save it in BranchFolders you want to work.\r\n- Note: BranchFolder will be C:\\Deployment \"application\", \"Image\", \"SWF\", \"SWF-Image\", \"Utils\". (Created by Initialize-ValentiaServer)\r\n\r\n``` PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\r\n\r\n### Convert existing .ps1 to task and setup task.\r\n\r\nIt's easy to convert normal .ps1 to task.\r\nTask file format is as below.\r\n\r\n```PowerShell\r\ntask taskname -Action{\r\n\tPowerShell Commands you want to run\r\n}\r\n```\r\n\r\nIf you .ps1 have like this code.\r\n\r\n```PowerShell\r\nGet-ChildItem\r\n```\r\n\r\n\r\nThen task will be like this.\r\n\r\n```PowerShell\r\ntask taskname -Action{\r\n\tGet-ChildItem\r\n}\r\n```\r\n\r\nYou can use almost all cmdlets and variables set.\r\nPlease check vale and valep section about a detail of some cmdlets cannot use in task.\r\n\r\n- Note:\r\n\t* All valentia cmdlets got credential before running task, therefore you don't need to get anymnore credentials in your script.\r\n\t* In other word, do not try to get another credential in you script. Especially in \"valep\" .\r\n\r\n\r\n\r\n# Execute deploy Commands\r\n\r\nAfter you satup Server/Clients, Credential amd DeproyGroups you can start execution.\r\n\r\n### 1. ```vale``` : Sequential Single Command execution\r\n\r\nThis command will execute ScriptBlock to deploy group written in DeployGroup.ps1.\r\nAs sequencially running, many hosts will takes x times to complete job.\r\n\r\n```PowerShell\r\nvale Deploygroup {ScriptBlock}\r\n```\r\n\r\nSAMPLE:\r\n```PowerShell\r\nvale new {Get-ChildItem}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n### 2. ```vale``` : Sequential Commandset execution\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run vale command\r\n\r\n```PowerShell\r\nvale DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n### 3. ```valep``` : Parallel Single Command execution \r\n\r\nAlmost same as vale command, just change command to valep.\r\nIt will speed up abpit 3-5 times than sequencial command.\r\n\r\n- Note that this isn't asyncroniuous but only parallel.\r\n\r\n```PowerShell\r\nvalep Deploygroup {ScriptBlock}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n### 4. ```valep``` : Parallel Commandset execution\r\n\r\nAlmost same as valep command, just change command to valep.\r\nIt will speed up abpit 3-5 times than sequencial command.\r\n\r\n- Note that this isn't asyncroniuous but only parallel.\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run valep command\r\n\r\n```PowerShell\r\nvalep DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n\r\n### 5. ```valea``` : Asynchronous Single Command execution \r\n\r\nNot same as vale and valep command. Because valea will execute asynchrously.\r\nvale is sequential job and will cost host count.\r\nvalep is parallel execution similer to valea but is not asynchronous.\r\nvalea is multithread asynchronous commad and also can call from C# while valep cannot.\r\n\r\nIt will speed up O(n) times with host count times than sequencial command.\r\n\r\n\r\n```PowerShell\r\nvalea Deploygroup {ScriptBlock}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n\r\n### 6. ```valea``` : Asynchronous Commandset execution\r\n\r\nNot same as vale and valep command. Because valea will execute asynchrously.\r\nvale is sequential job and will cost host count.\r\nvalep is parallel execution similer to valea but is not asynchronous.\r\nvalea is multithread asynchronous commad and also can call from C# while valep cannot.\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run valea command\r\n\r\n```PowerShell\r\nvalea DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n\r\n# Execute File transfer Commands\r\n\r\n### 1. ```upload``` : Single File Upload from Server to Clients\r\n\r\nYou can upload file to client with \"upload\" command.\r\nThis wrapps BITs Transfer inside.\r\n- Note: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\nex ) Upload file c:\\deployment\\upload\\upload.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n```Powershell\r\nupload -SourceFile \"filename in C:\\Deployment\\Upload\\....\" -DestinationFolder c:\\ -DeployGroup new\r\n```\r\n\r\nyou can omit parameter names like this.\r\n```Powershell\r\nupload \"upload.txt\" c:\\ new\r\n```\r\n\r\n\r\n### 2. ```uploadL``` : Files in List Upload from Server to Clients\r\n\r\nYou can upload multiple files listed in file with \"uploadL\" command.\r\nThis allow you ease select file manytime in command.\r\n\r\nThis wrapps BITs Transfer inside.\r\n- Note: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\nbefore use ran this command, you should create list file in C:\\Deployment\\Upload direcoty.\r\nFile format should like this.\r\n```\r\nSource, Destination\r\nC:\\Deployment\\Upload\\DownLoad.txt,\\\\10.0.4.100\\C$\r\nC:\\Deployment\\Upload\\hogehoge.txt,\\\\10.0.4.100\\C$\r\n```\r\n\r\nA Top line is Source, Destination header.\r\nAfter 2nd line is SourceFile fullpath and Destination folder full path to transfer.\r\nDeleimiter must \",\".\r\n\r\nNow you are ready to transfer list of files with following command.\r\n\r\nex ) Upload files listed in c:\\deployment\\upload\\list.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n```Powershell\r\nUploadL -ListFile list.txt -DestinationFolder c:\\ -DeployGroup new\r\n```\r\n\r\nOf cource you can omit parameter names like this.\r\n\r\n```Powershell\r\nUploadL list.txt c:\\ new\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n\r\n\r\n### 3. ```sync``` : Sync Server Folder and Files with Clients (DIFF mode)\r\n\r\nYou can Synchronise DeployServer folder and Clients Folder.\r\nParent will be DeployServer, it means clietns folder will be changed to sync as like as DeployServer.\r\n\r\nex ) sync folder C:\\Requirements to Remote Client folder \"C:\\hoge hoge\" for DeployGroup new is.\r\n```Powershell\r\nsync -SourceFolder C:\\Requirements -DestinationFolder \"c:\\hoge hoge\" -DeployGroup new\r\n```\r\n\r\nOf cource you can omit parameter names like this.\r\n\r\n```Powershell\r\nSync C:\\Requirements \"c:\\hoge hoge\" new\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how cmdlet working. **\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}