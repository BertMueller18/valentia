{"name":"Valentia","tagline":"PowerShell Remote deployment library for Windows Servers","body":"# Read Me Fast\r\nValentia is PowerShell deployment tool for Server-Client model.\r\nThis module set will optimize your work for deploy Commands or files to remote servers.\r\n\r\n\r\n# Special Thanks\r\nValentia inspired from capistrano ( a Ruby deployment tool for Linux) and psake ( a PowerShell build tool).\r\nThey are fantastic and awesome tools for automation and DevOps.\r\nEspecially psake showed cool way of coding and valentia followed in many points.\r\n\r\nAlso [psasync](http://newsqlblog.com/category/powershell/powershell-concurrency/) and [Get-NetworkInfo](http://learn-powershell.net/2012/05/13/using-background-runspaces-instead-of-psjobs-for-better-performance/) give me inspire to do asynchronous execution.\r\n\r\n\r\n# Latest Change\r\n\r\n## Version 0.3.x\r\n\r\n- version : 0.3.4\r\n\t\r\n\t[ author : guitarrapc ]\r\n\t\r\n\t[ Fev 4, 2013 ]\r\n\t\r\n\t* Remove non use function Get-ValentiaModuleReload\r\n\t* Added function ```ConvertTo-ValentiaTask```. Now you can convert your powershell script to valentia task easier. \r\n\t* Added function ```Show-ValentiaPromptForChoice```. Now you can show prompt easier.\r\n\t* Added function ```Get-ValentiaFileEncoding```. Now you can detect file encoding easier.\r\n\t* Added function ```Ping-ValentiaGroupAsync```. You can ping to the host ultra fast and test connections.\r\n\t* Added function ```Test-ValentiaGroupConnection```. You can filter result of ```Ping-ValentiaGroupAsync``` for demanded status.\r\n\t* Added function ```New-ValentiaDynamicParamMulti```. Now you can create Dynamic parameter easier.\r\n\t* Enhanced for [issue #47](https://github.com/guitarrapc/valentia/issues/47). Could not enable PSRemoting on AWS Windows Server is now solved. Added Firewall detection for ```Initialize-ValentiaEnvironment```.\r\n\t* fix issue : [Edit-valentaiaconfig ISE -NoProfile](https://github.com/guitarrapc/valentia/commit/31bd1a48382a5a59fea90fd87b9d8eff144a3c6a#commitcomment-4621590)\r\n\t* fix [issue #36](https://github.com/guitarrapc/valentia/issues/36) : Now installer keep directory structure for module.\r\n\t* fix issue [#42](https://github.com/guitarrapc/valentia/issues/42) : Now ```Invoke-ValentiaDownload``` as desired.\r\n\t* fix issue [#46](Show-ValentiaGroup Recurse switch defined as parameter) : now Show-ValentiaGroup -Recurse works as desired.\r\n\t* Change valentia Development from PowerShell ISE to Visual Studio 2013 with [PowerShell Tools for Visual Studio](http://visualstudiogallery.msdn.microsoft.com/c9eb3ba8-0c59-4944-9a62-6eee37294597)\r\n\t* Change CLR Target to 4.0 and OS version.\r\n\t* Changed valentia file encoding from default(shift-jis) to UTF8.\r\n\t* Change Module Type from Script Module to Manifest Module.\r\n\t* Change Password input from Read-Host to Get-Credential. [Issue #48](https://github.com/guitarrapc/valentia/issues/48)\r\n\t* Chage Get-ValentiaGroup for [Issue #50](https://github.com/guitarrapc/valentia/issues/50). Now Get-ValentiaGroup never check connection.\r\n\t* Changed parameter for $valentia.RunSpacePool. Now Logical Number of Core will be use for this parameter.\r\n\t* Enhanced for [issue #28](https://github.com/guitarrapc/valentia/issues/28)Change ```Invoke-ValentiaAsync``` meassage from Warning line to Progress. You can check each host progress when added -Verbose switch.\r\n\t* ErrorPreference handling now can control with valentia-config.ps1\r\n\t* define help message for all functions.\r\n\t* Added ```-quiet``` switch to ```Invoke-Valentia```,```Invoke-valentiaParallel``` and ```Invoke-ValentiaAsync```. Now you can compress messages and only recieve execution result in bool.\r\n\r\n\t\r\n# Valid OS and PowerShell Verstion\r\n\r\nvalentia works with PowerShell Version 3.0 and higher.\r\nI'm developing with Windows 8, Windows 8.1 and Windows 2012.\r\nSupporting Operating System are...\r\n\r\n- Windows 7 (with PowerShell V3.0 and higher)\r\n- Windows 8 (with PowerShell V3.0 and higher)\r\n- Windows 8.1 (with PowerShell V4.0 and higher)\r\n- Windows 2012 (with PowerShell V3.0 and higher)\r\n- Windows 2012 R2 (with PowerShell V4.0 and higher)\r\n\r\nnote : all functions are confirmed with Windows Server 2012 x64 English environment.\r\n\r\n\r\n# Prerequisite\r\n\r\nYou need to install followings to use valentia file transfer.\r\n\r\n1. Enable \"IIS BITs Transfer\" for single and List file transfer from \"Windows Program and freature\"\r\n2. Install \"FastCopy\" to Sync Folders. (please intstall FastCopyx64 to \"C:\\Program Files\\FastCopy\")\r\n\t- [Download FastCopy? click here to go HP.](http://ipmsg.org/tools/fastcopy.html)\r\n3. Make sure you can execute PowerShell Script with Execution Policy. To enable Execution Policy then run following command with Admin elevated PowerShell.\r\n\t- ```Set-ExecutionPolicy RemoteSigned```\r\n\r\n# Easy Install !!\r\n\r\nTo install valentia now, open a command prompt and pate the text from the box below and press enter.\r\n\r\n```text\r\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://raw.github.com/guitarrapc/valentia/master/valentia/RemoteInstall.ps1'))\"\r\n```\r\n\r\nAfter the installation complete, you will find valentia installed into your user's Module folder.\r\n\r\n```PowerShell\r\n$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\r\n```\r\n\r\n## Custom Install\r\n\r\n### Local Installation for user\r\n \r\nIf Remote installation are not allowed in your environment, set valentia in any path then you can install valentia localy with run ```install.bat```.\r\nThis bat file will also copy valentia to user module path \r\n\r\n```PowerShell\r\n$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\r\n```\r\n\r\n### Use valentia for all users.\r\n\r\nIf you want to use valentia with all users, then set valentia module folder to:\r\n\r\n```\r\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\valentia\r\n```\r\n\r\n## Import valentia module\r\n\r\nIn PowerShell V3.0, all modules located in default Module Path will be automatically search and loaded before starting script.\r\n\r\nBut if you sat module into custom path, means not default Module Path, PowerShell will not automatically load yout module. In this case, please use Import-Module cmdlet in where ```valentia.psd1``` locating.\r\n\r\n```PowerShell\r\ncd \"move to custom path you sat valentia.psd1\"\r\nImport-Module valentia\r\n```\r\n\r\nIf you sat valentia in standard Module Path described in \"Easy Install\", you don't need to import manually. However ```Import-Module valentia``` will import $valentia variables, and it will be help you some.\r\n\r\n```PowerShell\r\nImport-Module valentia\r\n```\r\n\r\n# valentia functions\r\n\r\nYou can see valentia functions by following command.\r\n\r\n```PowerShell\r\nGet-command -module valentia\r\n```\r\n\r\nFollowing functions will be shown.\r\n\r\n|CommandType|Name|ModuleName|\r\n|----|----|----\r\n|Function|ConvertTo-ValentiaTask|valentia|\r\n|Function|Edit-ValentiaConfig|valentia|\r\n|Function|Get-ValentiaCredential|valentia|\r\n|Function|Get-ValentiaFileEncoding|valentia|\r\n|Function|Get-ValentiaGroup|valentia|\r\n|Function|Get-ValentiaRebootRequiredStatus|valentia|\r\n|Function|Get-ValentiaTask|valentia|\r\n|Function|Initialize-ValentiaEnvironment|valentia|\r\n|Function|Invoke-Valentia|valentia|\r\n|Function|Invoke-ValentiaAsync|valentia|\r\n|Function|Invoke-ValentiaClean|valentia|\r\n|Function|Invoke-ValentiaCommand|valentia|\r\n|Function|Invoke-valentiaDeployGroupRemark|valentia|\r\n|Function|Invoke-ValentiaDeployGroupUnremark|valentia|\r\n|Function|Invoke-ValentiaDownload|valentia|\r\n|Function|Invoke-ValentiaParallel|valentia|\r\n|Function|Invoke-ValentiaSync|valentia|\r\n|Function|Invoke-ValentiaUpload|valentia|\r\n|Function|Invoke-ValentiaUploadList|valentia|\r\n|Function|New-ValentiaCredential|valentia|\r\n|Function|New-ValentiaFolder|valentia|\r\n|Function|New-ValentiaGroup|valentia|\r\n|Function|Ping-ValentiaGroupAsync|valentia|\r\n|Function|Set-ValentiaHostName|valentia|\r\n|Function|Set-ValentiaLocation|valentia|\r\n|Function|Show-ValentiaConfig|valentia|\r\n|Function|Show-ValentiaGroup|valentia|\r\n|Function|Show-ValentiaPromptForChoice|valentia|\r\n|Function|Test-ValentiaGroupConnection|valentia|\r\n|Workflow|Invoke-ValentiaCommandParallel|valentia|\r\n\r\n# valentia Alias\r\n\r\nvalentia functions have Alias to let you use it easir.\r\nYou can find them as like this.\r\n\r\n```PowerShell\r\nGet-Alias | where ModuleName -eq \"valentia\"\r\n```\r\n\r\nThis show alias defined in valentia\r\n\r\n|CommandType|Name|ResolveCommandName|ModuleName|\r\n|----|----|----|----|\r\n|Alias|Clean|Invoke-ValentiaClean|Valentia|\r\n|Alias|Cred|Get-ValentiaCredential|Valentia|\r\n|Alias|Download|Invoke-ValentiaDownload|Valentia|\r\n|Alias|Go|Set-ValentiaLocation|Valentia|\r\n|Alias|Initial|Initialize-ValentiaEnvironment|Valentia|\r\n|Alias|ipremark|Invoke-valentiaDeployGroupRemark|Valentia|\r\n|Alias|ipunremark|Invoke-ValentiaDeployGroupUnremark|Valentia|\r\n|Alias|PingAsync|Ping-ValentiaGroupAsync|Valentia|\r\n|Alias|Rename|Set-ValentiaHostName|Valentia|\r\n|Alias|Sync|Invoke-ValentiaSync|Valentia|\r\n|Alias|Target|Get-ValentiaGroup|Valentia|\r\n|Alias|Task|Get-ValentiaTask|Valentia|\r\n|Alias|Upload|Invoke-ValentiaUpload|Valentia|\r\n|Alias|UploadL|Invoke-ValentiaUploadList|Valentia|\r\n|Alias|Vale|Invoke-Valentia|Valentia|\r\n|Alias|Valea|Invoke-ValentiaAsync|Valentia|\r\n|Alias|Valep|Invoke-ValentiaParallel|Valentia|\r\n\r\n\r\n# Environment Setup Commands\r\n\r\nBefore you start valentia deployment, you should setup both Server and Clients to work PSRemote Connection.\r\n\r\n### 1. ```Initialize-ValentiaEnvironment``` : Setup Server\r\n\r\nThis command will let your Server for valentia remoting.\r\n\r\n\t1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n\t2. Enable-PSRemoting\r\n\t3. Add hosts to trustedHosts  (Default : *)\r\n\t4. Set MaxShellsPerUser from 25 to 100\r\n\t5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n\t6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n\t7. Create OS user for Deploy connection. (Default : ec2-user)\r\n\t8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n\t9. Create/Revise Deploy user credential secure file. (Server Only / Default : True)\r\n\t10. Create Deploy Folders (Server Only / Default : True)\r\n\t11. Set HostName as format (white-$HostUsage-IP)\r\n\t12. Get Status for Reboot Status\r\n\t\r\n\t* Currently remarking Set-NetworkProfile private\r\n\r\nOnce ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\"\r\n```\r\n\r\n** you can omit ```-Server``` and ```-TrustedHosts \"*\"``` as it were default **\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment\r\n```\r\n\r\nWhen Credential prompt was display input password in masked read line, then OS user (in default ec2-user) will be created and all PSRemote session to all hosts are enabled.\r\nAlso trying to save password in secdure stirng in default, input deploy user password again.\r\n\r\n\r\n** If you want to restrict Trusted Hosts, you can use -TrustedHosts parameter to select. **\r\n\r\nex) restrict to 10.0.0.0\r\n```PowerShell\r\nInitialize-ValentiaServer -TrustedHosts \"10.0.0.0\"\r\n```\r\n\r\n** If you want setup without OS User setup? then add -NoOSUser switch. **\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n** ServerOnly : If you want setup without OS User setup and Save Credentail? then add -NoPassSave switch. **\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Server -TrustedHosts \"*\" -NoPassSave\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n### 2. ```Initialize-ValentiaEnvironment -Client``` : Setup Clients\r\n\r\nThis command will let your Client for valentia remoting.\r\n\r\n\t1. Set-ExecutionPolicy (Default : RemoteSigned)\r\n\t2. Enable-PSRemoting\r\n\t3. Add hosts to trustedHosts  (Default : *)\r\n\t4. Set MaxShellsPerUser from 25 to 100\r\n\t5. Add PowerShell Remoting Inbound rule to Firewall (Default : TCP 5985)\r\n\t6. Disable Enhanced Security for Internet Explorer (Default : True)\r\n\t7. Create OS user for Deploy connection. (Default : ec2-user)\r\n\t8. Create Windows PowerShell Module Folder for DeployUser (Default : C:\\Users\\$ec2-user\\Documents\\WindowsPowerShell\\Modules)\r\n\t9. Create Deploy Folders (Server Only / Default : True)\r\n\t10. Set HostName as format (white-$HostUsage-IP)\r\n\t11. Get Status for Reboot Status\r\n\r\n\r\nOnce ran this command, You will got prompt for secret password of \"OS User\" (in default is ec2-user).\r\n\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\"\r\n```\r\n\r\n** you can omit ```-TrustedHosts \"*\"``` as it were default**\r\n\r\n- NOTE: If you sat Server and Client \"SAME USER and SAME PASSWORD\" then credential will be escaped.\r\n- This means, if you ran Initialize-ValentiaServer and Initialize-ValentiaClient, then ec2-user will be used and can be escape credential input.\r\n- Because of Parallel commands using workflow, (Domain separation), credential escape was required.\r\n- The other command can retrieve and use Credential, so other user credential will also valid for them.\r\n\r\n\r\nWanna setup without OS User setup? then add -NoOSUser switch.\r\n```PowerShell\r\nInitialize-ValentiaEnvironment -Client -TrustedHosts \"*\" -NoOSUser\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n### 3. ```New-ValentiaCredential``` : Create New Credential secure file\r\n\r\nFollowing command will make secure string file to save your credential.\r\n** If you ran Initialize-ValentiaServer without -NoSavePass switch, then you can skip this section. **\r\n** However if you want to revise saved secure Password, then use this function to revise save file. **\r\n\r\n\r\n```PowerShell\r\nNew-ValentiaCredential\r\n```\r\n\r\nor you can select user for credential.\r\n\r\n```PowerShell\r\nNew-ValentiaCredential -User hogehoge\r\n```\r\n\r\n- NOTE: Once you execute command, you will got prompt to save secure strings of user.\r\n- Default user is sat as ec2-user, it will use if no -user had input.\r\n\r\n\r\n### 4. ```Initialize-ValentiaGroup``` : Create New deploygroup file\r\n\r\nTo execute deployment command to multiple hosts, you don't need to input hosts everytime.\r\nJust list them up in file.\r\n\r\nThe file you specified will be output in following path.\r\n```\r\nC:\\Deployment\\Deploygroup\\ *****.ps1\r\n```\r\n\r\nDeploy Group file just required to be split by `r`n.\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n# 10.0.0.101 <= this line will be remarked as not started with decimal\r\n```\r\n\r\nYou can create deploy group file in only one command.\r\nOf cource there are several way to create deploygroup file.\r\nYou can make file with excel,notepad or powershell utils here.\r\n\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients array[] -FileName FILENAME.ps1\r\n```\r\n\r\nSAMPLE CODE:\r\n```PowerShell\r\nNew-ValentiaGroup -DeployClients \"10.0.0.1\",\"10.0.0.2\" -FileName sample.ps1\r\n```\r\n\r\nthis will make sample.ps1 in C:\\Deployment\\Deploy_group\\ with 2 hosts (\"10.0.0.1\",\"10.0.0.2\") written.\r\n\r\nWhen using DeployGroup, just set file name without Extensions.\r\nex) if you sat file name as \"new.ps1\" then use it by \"new\".\r\n\r\n### 5. ```Invoke-valentiaDeployGroupRemark``` : Remark ipaddress for deploygroup file inside deploygroup\r\n\r\nThere would be many time to remark some deploy target inside deploygroup file.\r\nThis is easy work but boring to check which file contains target deploy ip.\r\n\r\nThis function will ease you remark target ipaddresses and check how change.\r\n\r\n\r\nThe function will search recursible inside deploygroup.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102 <= if you want to remark this line for all the files inside deploygroup folder.\r\n```\r\n\r\nJust type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\nThis will change PowerShell\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102\r\n```\r\n\r\nif you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupRemark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n \r\n\r\n### 6. ```Invoke-valentiaDeployGroupUnremark``` : Unremark ipaddress for deploygroup file inside deploygroup\r\n\r\nif you remark ipaddresses in deploygroup file, then you want to unremark it:)\r\nThis function will ease you unremark target ipaddresses and check how change.\r\n\r\n\r\nThe function will search recursible inside deploygroup.\r\n\r\n```\r\nC:\\Deployment\\Deploygroup\\**\\**\\.....*****.ps1\r\n```\r\n\r\nSAMPLE deployGroup input\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n#10.0.0.102 <= if you want to unremark this line for all the files inside deploygroup folder.\r\n```\r\n\r\nJust type as like this.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -overWrite -Verbose\r\n```\r\n\r\nThis will change PowerShell\r\n```\r\n10.0.0.100\r\n10.0.0.101\r\n10.0.0.102\r\n```\r\n\r\nif you just want to check how affect and don't want to replace file, then remove -overwrite switch.\r\n\r\n```PowerShell\r\nInvoke-valentiaDeployGroupUnremark -remarkIPAddresses 10.0.0.102 -Verbose\r\n```\r\n\r\n\r\n# Task for Commandset\r\n\r\n### Summary of Task\r\n\r\nYou can make task file To execute many commands.\r\nWrite task in file with below format and save it in BranchFolders you want to work.\r\n- Note: BranchFolder will be C:\\Deployment \"application\", \"Image\", \"SWF\", \"SWF-Image\", \"Utils\". (Created by Initialize-ValentiaServer)\r\n\r\n``` PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\r\n\r\n### Convert existing .ps1 to task and setup task.\r\n\r\nIt's easy to convert normal .ps1 to task.\r\nTask file format is as below.\r\n\r\n```PowerShell\r\ntask taskname -Action{\r\n\tPowerShell Commands you want to run\r\n}\r\n```\r\n\r\nIf you .ps1 have like this code.\r\n\r\n```PowerShell\r\nGet-ChildItem\r\n```\r\n\r\n\r\nThen task will be like this.\r\n\r\n```PowerShell\r\ntask taskname -Action{\r\n\tGet-ChildItem\r\n}\r\n```\r\n\r\nYou can use almost all functions and variables set.\r\nPlease check vale and valep section about a detail of some functions cannot use in task.\r\n\r\n- Note:\r\n\t* valentia functions get stored credential before running task, therefore you don't need to create/write credentials in your script.\r\n\t* In other word, do not try to get another credential in you script. Especially in \"valep\" .\r\n\r\n\r\n\r\n# Execute deploy Commands\r\n\r\nAfter you satup Server/Clients, Credential amd DeproyGroups you can start execution.\r\n\r\n### 1. ```vale``` : Sequential Single Command execution\r\n\r\nThis command will execute ScriptBlock to deploy group written in DeployGroup.ps1.\r\nAs sequencially running, many hosts will takes x times to complete job.\r\n\r\n```PowerShell\r\nvale Deploygroup {ScriptBlock}\r\n```\r\n\r\nSAMPLE:\r\n```PowerShell\r\nvale new {Get-ChildItem}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n### 2. ```vale``` : Sequential Commandset execution\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run vale command\r\n\r\n```PowerShell\r\nvale DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n### 3. ```valep``` : Parallel Single Command execution \r\n\r\nAlmost same as vale command, just change command to valep.\r\nIt will speed up abpit 3-5 times than sequencial command.\r\n\r\n- Note that this isn't asyncroniuous but only parallel.\r\n\r\n```PowerShell\r\nvalep Deploygroup {ScriptBlock}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n### 4. ```valep``` : Parallel Commandset execution\r\n\r\nAlmost same as valep command, just change command to valep.\r\nIt will speed up abpit 3-5 times than sequencial command.\r\n\r\n- Note that this isn't asyncroniuous but only parallel.\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run valep command\r\n\r\n```PowerShell\r\nvalep DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n\r\n### 5. ```valea``` : Asynchronous Single Command execution \r\n\r\nNot same as vale and valep command. Because valea will execute asynchrously.\r\nvale is sequential job and will cost host count.\r\nvalep is parallel execution similer to valea but is not asynchronous.\r\nvalea is multithread asynchronous commad and also can call from C# while valep cannot.\r\n\r\nIt will speed up O(n) times with host count times than sequencial command.\r\n\r\n\r\n```PowerShell\r\nvalea Deploygroup {ScriptBlock}\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n\r\n### 6. ```valea``` : Asynchronous Commandset execution\r\n\r\nNot same as vale and valep command. Because valea will execute asynchrously.\r\nvale is sequential job and will cost host count.\r\nvalep is parallel execution similer to valea but is not asynchronous.\r\nvalea is multithread asynchronous commad and also can call from C# while valep cannot.\r\n\r\nJust make task for commandset.\r\n```PowerShell\r\nTask taskname {\r\n\tCommandset you want to run1\r\n\tCommandset you want to run2\r\n}\r\n```\r\n\r\nAfter you made task, you should move to BranchFolder you saved task.\r\n\"go\" command will ease you move to BranchFolder path where you carete task. \r\nex ) application, then\r\n``` PowerShell\r\ngo application\r\n```\r\n\r\nAfter you move to BranchFolder run valea command\r\n\r\n```PowerShell\r\nvalea DeployGroup .\\Taskfile.ps1\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n\r\n# Execute File transfer Commands\r\n\r\n### 1. ```upload``` : Single File Upload from Server to Clients\r\n\r\nYou can upload file to client with \"upload\" command.\r\nThis wrapps BITs Transfer inside.\r\n- Note: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\nex ) Upload file c:\\deployment\\upload\\upload.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n```Powershell\r\nupload -SourceFile \"filename in C:\\Deployment\\Upload\\....\" -DestinationFolder c:\\ -DeployGroup new\r\n```\r\n\r\nyou can omit parameter names like this.\r\n```Powershell\r\nupload \"upload.txt\" c:\\ new\r\n```\r\n\r\n\r\n### 2. ```uploadL``` : Files in List Upload from Server to Clients\r\n\r\nYou can upload multiple files listed in file with \"uploadL\" command.\r\nThis allow you ease select file manytime in command.\r\n\r\nThis wrapps BITs Transfer inside.\r\n- Note: The files using to upload must set in C:\\Deployment\\Upload at Server side.\r\n\r\nbefore use ran this command, you should create list file in C:\\Deployment\\Upload direcoty.\r\nFile format should like this.\r\n```\r\nSource, Destination\r\nC:\\Deployment\\Upload\\DownLoad.txt,\\\\10.0.4.100\\C$\r\nC:\\Deployment\\Upload\\hogehoge.txt,\\\\10.0.4.100\\C$\r\n```\r\n\r\nA Top line is Source, Destination header.\r\nAfter 2nd line is SourceFile fullpath and Destination folder full path to transfer.\r\nDeleimiter must \",\".\r\n\r\nNow you are ready to transfer list of files with following command.\r\n\r\nex ) Upload files listed in c:\\deployment\\upload\\list.txt to Remote Client C:\\ for DeployGroup new is.\r\n\r\n```Powershell\r\nUploadL -ListFile list.txt -DestinationFolder c:\\ -DeployGroup new\r\n```\r\n\r\nOf cource you can omit parameter names like this.\r\n\r\n```Powershell\r\nUploadL list.txt c:\\ new\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n\r\n\r\n### 3. ```sync``` : Sync Server Folder and Files with Clients (DIFF mode)\r\n\r\nYou can Synchronise DeployServer folder and Clients Folder.\r\nParent will be DeployServer, it means clietns folder will be changed to sync as like as DeployServer.\r\n\r\nex ) sync folder C:\\Requirements to Remote Client folder \"C:\\hoge hoge\" for DeployGroup new is.\r\n```Powershell\r\nsync -SourceFolder C:\\Requirements -DestinationFolder \"c:\\hoge hoge\" -DeployGroup new\r\n```\r\n\r\nOf cource you can omit parameter names like this.\r\n\r\n```Powershell\r\nSync C:\\Requirements \"c:\\hoge hoge\" new\r\n```\r\n\r\n** Adding ```-Verbose``` switch will ease you check how function working. **\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}